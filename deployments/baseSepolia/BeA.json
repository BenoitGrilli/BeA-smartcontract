{
  "address": "0x5E3Aa45C605244C011eD4C81d1105b0Ae4EE664A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "HashAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getHashDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "getHashDetailsByHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalHashes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "isHashSubmitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x815d680bbb5460721686a737b5baddc6dd080702e69743db37efaa5acda31b4a",
  "receipt": {
    "to": null,
    "from": "0x0599fe5874eBB26230Ce1437F7Bf71b9C51D4D71",
    "contractAddress": "0x5E3Aa45C605244C011eD4C81d1105b0Ae4EE664A",
    "transactionIndex": 8,
    "gasUsed": "525558",
    "logsBloom": "0x
    "blockHash": "0xaad070af2a89ca0c96afd17e2db72d310b7567d772a9225000648a0ac9b562c8",
    "transactionHash": "0x815d680bbb5460721686a737b5baddc6dd080702e69743db37efaa5acda31b4a",
    "logs": [],
    "blockNumber": 15404831,
    "cumulativeGasUsed": "1154860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "d60e29e8c328dd83082f5b4e2e093919",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"HashAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getHashDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getHashDetailsByHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isHashSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BeA.sol\":\"BeA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BeA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract BeA {\\n    // Struct to hold hash details\\n    struct HashRecord {\\n        bytes32 hash;      // The stored hash\\n        uint256 timestamp; // Timestamp of when the hash was submitted\\n        address sender;    // Address of the sender who submitted the hash\\n    }\\n\\n    // Mapping to store hash records with a global index\\n    mapping(uint256 => HashRecord) private hashRecords;\\n    \\n    // Mapping to check if a hash already exists (to prevent duplicates)\\n    mapping(bytes32 => bool) private existingHashes;\\n\\n    // Mapping from hash to its index in hashRecords\\n    mapping(bytes32 => uint256) private hashToIndex;\\n\\n    // Counter to track the total number of hash submissions\\n    uint256 private hashCount;\\n\\n    // Event to log when a new hash is added\\n    event HashAdded(uint256 indexed id, bytes32 indexed hash, uint256 timestamp, address indexed sender);\\n\\n    // Modifier to check if the hash exists\\n    modifier hashDoesNotExist(bytes32 hash) {\\n        require(!existingHashes[hash], \\\"This hash has already been submitted.\\\");\\n        _;\\n    }\\n\\n    // Function to submit a new hash\\n    function submitHash(bytes32 hash) external hashDoesNotExist(hash) {\\n        // Record the current timestamp\\n        uint256 currentTimestamp = block.timestamp;\\n\\n        // Store the new hash record along with the sender's address\\n        hashRecords[hashCount] = HashRecord(hash, currentTimestamp, msg.sender);\\n\\n        // Map the hash to its index\\n        hashToIndex[hash] = hashCount;\\n\\n        // Mark this hash as existing\\n        existingHashes[hash] = true;\\n\\n        // Emit an event to log the new hash submission, including the sender's address\\n        emit HashAdded(hashCount, hash, currentTimestamp, msg.sender);\\n\\n        // Increment the hash count\\n        hashCount++;\\n    }\\n\\n    // Function to check if a hash has already been submitted\\n    function isHashSubmitted(bytes32 hash) external view returns (bool) {\\n        return existingHashes[hash];\\n    }\\n\\n    // Function to retrieve the details of a hash submission by index\\n    function getHashDetails(uint256 id) external view returns (bytes32 hash, uint256 timestamp, address sender) {\\n        require(id < hashCount, \\\"Invalid hash record ID.\\\");\\n        HashRecord storage record = hashRecords[id];\\n        return (record.hash, record.timestamp, record.sender);\\n    }\\n\\n    // Function to retrieve hash details using the hash as an argument\\n    function getHashDetailsByHash(bytes32 hash) external view returns (uint256 id, uint256 timestamp, address sender) {\\n        require(existingHashes[hash], \\\"Hash not found.\\\");\\n        \\n        // Retrieve the index of the hash\\n        uint256 index = hashToIndex[hash];\\n        \\n        HashRecord storage record = hashRecords[index];\\n        return (index, record.timestamp, record.sender);\\n    }\\n\\n    // Function to get the total number of hashes submitted\\n    function getTotalHashes() external view returns (uint256) {\\n        return hashCount;\\n    }\\n}\\n\",\"keccak256\":\"0xb60490f0141aa20abfd895bab5b96364b9fb2f927e4de19dca208c0c2a71019f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610896806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806308891a321461005c578063607f22a914610078578063a4458dc4146100aa578063a68e6aa3146100c8578063d117eda9146100f8575b600080fd5b610076600480360381019061007191906104c0565b61012a565b005b610092600480360381019061008d91906104c0565b6102e8565b6040516100a193929190610547565b60405180910390f35b6100b26103b5565b6040516100bf919061057e565b60405180910390f35b6100e260048036038101906100dd91906104c0565b6103bf565b6040516100ef91906105b4565b60405180910390f35b610112600480360381019061010d91906105fb565b6103e9565b60405161012193929190610637565b60405180910390f35b806001600082815260200190815260200160002060009054906101000a900460ff161561018c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610183906106f1565b60405180910390fd5b600042905060405180606001604052808481526020018281526020013373ffffffffffffffffffffffffffffffffffffffff168152506000806003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506003546002600085815260200190815260200160002081905550600180600085815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16836003547fe3eac64e9f4e2698b1bed34b801768955dd39db520ad3c6dfb4fcbc430a5a91d846040516102c3919061057e565b60405180910390a4600360008154809291906102de90610740565b9190505550505050565b60008060006001600085815260200190815260200160002060009054906101000a900460ff1661034d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610344906107d4565b60405180910390fd5b600060026000868152602001908152602001600020549050600080600083815260200190815260200160002090508181600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694509450945050509193909250565b6000600354905090565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60008060006003548410610432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042990610840565b60405180910390fd5b60008060008681526020019081526020016000209050806000015481600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935093509350509193909250565b600080fd5b6000819050919050565b61049d8161048a565b81146104a857600080fd5b50565b6000813590506104ba81610494565b92915050565b6000602082840312156104d6576104d5610485565b5b60006104e4848285016104ab565b91505092915050565b6000819050919050565b610500816104ed565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053182610506565b9050919050565b61054181610526565b82525050565b600060608201905061055c60008301866104f7565b61056960208301856104f7565b6105766040830184610538565b949350505050565b600060208201905061059360008301846104f7565b92915050565b60008115159050919050565b6105ae81610599565b82525050565b60006020820190506105c960008301846105a5565b92915050565b6105d8816104ed565b81146105e357600080fd5b50565b6000813590506105f5816105cf565b92915050565b60006020828403121561061157610610610485565b5b600061061f848285016105e6565b91505092915050565b6106318161048a565b82525050565b600060608201905061064c6000830186610628565b61065960208301856104f7565b6106666040830184610538565b949350505050565b600082825260208201905092915050565b7f5468697320686173682068617320616c7265616479206265656e207375626d6960008201527f747465642e000000000000000000000000000000000000000000000000000000602082015250565b60006106db60258361066e565b91506106e68261067f565b604082019050919050565b6000602082019050818103600083015261070a816106ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061074b826104ed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361077d5761077c610711565b5b600182019050919050565b7f48617368206e6f7420666f756e642e0000000000000000000000000000000000600082015250565b60006107be600f8361066e565b91506107c982610788565b602082019050919050565b600060208201905081810360008301526107ed816107b1565b9050919050565b7f496e76616c69642068617368207265636f72642049442e000000000000000000600082015250565b600061082a60178361066e565b9150610835826107f4565b602082019050919050565b600060208201905081810360008301526108598161081d565b905091905056fea26469706673582212208e2892e6160abe95e6bde6f10afe70f0b78f39a5064a54cef467526bc8687f3564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806308891a321461005c578063607f22a914610078578063a4458dc4146100aa578063a68e6aa3146100c8578063d117eda9146100f8575b600080fd5b610076600480360381019061007191906104c0565b61012a565b005b610092600480360381019061008d91906104c0565b6102e8565b6040516100a193929190610547565b60405180910390f35b6100b26103b5565b6040516100bf919061057e565b60405180910390f35b6100e260048036038101906100dd91906104c0565b6103bf565b6040516100ef91906105b4565b60405180910390f35b610112600480360381019061010d91906105fb565b6103e9565b60405161012193929190610637565b60405180910390f35b806001600082815260200190815260200160002060009054906101000a900460ff161561018c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610183906106f1565b60405180910390fd5b600042905060405180606001604052808481526020018281526020013373ffffffffffffffffffffffffffffffffffffffff168152506000806003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506003546002600085815260200190815260200160002081905550600180600085815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16836003547fe3eac64e9f4e2698b1bed34b801768955dd39db520ad3c6dfb4fcbc430a5a91d846040516102c3919061057e565b60405180910390a4600360008154809291906102de90610740565b9190505550505050565b60008060006001600085815260200190815260200160002060009054906101000a900460ff1661034d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610344906107d4565b60405180910390fd5b600060026000868152602001908152602001600020549050600080600083815260200190815260200160002090508181600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694509450945050509193909250565b6000600354905090565b60006001600083815260200190815260200160002060009054906101000a900460ff169050919050565b60008060006003548410610432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042990610840565b60405180910390fd5b60008060008681526020019081526020016000209050806000015481600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935093509350509193909250565b600080fd5b6000819050919050565b61049d8161048a565b81146104a857600080fd5b50565b6000813590506104ba81610494565b92915050565b6000602082840312156104d6576104d5610485565b5b60006104e4848285016104ab565b91505092915050565b6000819050919050565b610500816104ed565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053182610506565b9050919050565b61054181610526565b82525050565b600060608201905061055c60008301866104f7565b61056960208301856104f7565b6105766040830184610538565b949350505050565b600060208201905061059360008301846104f7565b92915050565b60008115159050919050565b6105ae81610599565b82525050565b60006020820190506105c960008301846105a5565b92915050565b6105d8816104ed565b81146105e357600080fd5b50565b6000813590506105f5816105cf565b92915050565b60006020828403121561061157610610610485565b5b600061061f848285016105e6565b91505092915050565b6106318161048a565b82525050565b600060608201905061064c6000830186610628565b61065960208301856104f7565b6106666040830184610538565b949350505050565b600082825260208201905092915050565b7f5468697320686173682068617320616c7265616479206265656e207375626d6960008201527f747465642e000000000000000000000000000000000000000000000000000000602082015250565b60006106db60258361066e565b91506106e68261067f565b604082019050919050565b6000602082019050818103600083015261070a816106ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061074b826104ed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361077d5761077c610711565b5b600182019050919050565b7f48617368206e6f7420666f756e642e0000000000000000000000000000000000600082015250565b60006107be600f8361066e565b91506107c982610788565b602082019050919050565b600060208201905081810360008301526107ed816107b1565b9050919050565b7f496e76616c69642068617368207265636f72642049442e000000000000000000600082015250565b600061082a60178361066e565b9150610835826107f4565b602082019050919050565b600060208201905081810360008301526108598161081d565b905091905056fea26469706673582212208e2892e6160abe95e6bde6f10afe70f0b78f39a5064a54cef467526bc8687f3564736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/BeA.sol:BeA",
        "label": "hashRecords",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(HashRecord)8_storage)"
      },
      {
        "astId": 17,
        "contract": "contracts/BeA.sol:BeA",
        "label": "existingHashes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 21,
        "contract": "contracts/BeA.sol:BeA",
        "label": "hashToIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 23,
        "contract": "contracts/BeA.sol:BeA",
        "label": "hashCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(HashRecord)8_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BeA.HashRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(HashRecord)8_storage"
      },
      "t_struct(HashRecord)8_storage": {
        "encoding": "inplace",
        "label": "struct BeA.HashRecord",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/BeA.sol:BeA",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5,
            "contract": "contracts/BeA.sol:BeA",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7,
            "contract": "contracts/BeA.sol:BeA",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}