{
  "language": "Solidity",
  "sources": {
    "contracts/BeA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract BeA {\n    // Struct to hold hash details\n    struct HashRecord {\n        bytes32 hash;      // The stored hash\n        uint256 timestamp; // Timestamp of when the hash was submitted\n        address sender;    // Address of the sender who submitted the hash\n    }\n\n    // Mapping to store hash records with a global index\n    mapping(uint256 => HashRecord) private hashRecords;\n    \n    // Mapping to check if a hash already exists (to prevent duplicates)\n    mapping(bytes32 => bool) private existingHashes;\n\n    // Counter to track the total number of hash submissions\n    uint256 private hashCount;\n\n    // Event to log when a new hash is added\n    event HashAdded(uint256 indexed id, bytes32 indexed hash, uint256 timestamp, address indexed sender);\n\n    // Modifier to check if the hash exists\n    modifier hashDoesNotExist(bytes32 hash) {\n        require(!existingHashes[hash], \"This hash has already been submitted.\");\n        _;\n    }\n\n    // Function to submit a new hash\n    function submitHash(bytes32 hash) external hashDoesNotExist(hash) {\n        // Record the current timestamp\n        uint256 currentTimestamp = block.timestamp;\n\n        // Store the new hash record along with the sender's address\n        hashRecords[hashCount] = HashRecord(hash, currentTimestamp, msg.sender);\n\n        // Mark this hash as existing\n        existingHashes[hash] = true;\n\n        // Emit an event to log the new hash submission, including the sender's address\n        emit HashAdded(hashCount, hash, currentTimestamp, msg.sender);\n\n        // Increment the hash count\n        hashCount++;\n    }\n\n    // Function to check if a hash has already been submitted\n    function isHashSubmitted(bytes32 hash) external view returns (bool) {\n        return existingHashes[hash];\n    }\n\n    // Function to retrieve the details of a hash submission by index\n    function getHashDetails(uint256 id) external view returns (bytes32 hash, uint256 timestamp, address sender) {\n        require(id < hashCount, \"Invalid hash record ID.\");\n        HashRecord storage record = hashRecords[id];\n        return (record.hash, record.timestamp, record.sender);\n    }\n\n    // Function to get the total number of hashes submitted\n    function getTotalHashes() external view returns (uint256) {\n        return hashCount;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}